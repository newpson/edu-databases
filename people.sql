drop table if exists "Профессия", "Человек";
drop type if exists "Пол человека";

create type "Пол человека" as enum('М', 'Ж');

create table "Профессия" (
  "Номер" integer primary key generated always as identity,
  "Наименование" text unique,
  "Зарплата" integer
);

create or replace function "ПрофессияНомер"(text)
returns integer as
$$
declare "Результат" integer;
begin
  select "Номер" into "Результат"
  from "Профессия"
  where "Наименование" = $1;
  if "Результат" is null then
    raise exception 'Профессия не найдена: %', $1;
  end if;
  return "Результат";
end;
$$ language plpgsql;

create table "Человек" (
  "Номер" integer primary key generated always as identity,
  "Фамилия" text,
  "Имя" text,
  "Пол" "Пол человека",
  "Возраст" interval check ("Возраст" >= interval '1 second'),
  "Название города" text,
  "Отец" integer references "Человек" ("Номер"),
  "Мать" integer references "Человек" ("Номер"),
  "Профессия" integer references "Профессия" ("Номер"),
  unique ("Фамилия", "Имя", "Возраст") -- для простоты доступа
);

create or replace function "ЧеловекНомер"(text, integer default 0)
returns integer as
$$
declare "Результат" integer;
begin
  select "Номер" into "Результат"
  from "Человек"
  where "Фамилия" = split_part($1, ' ', 1)
    and "Имя" = split_part($1, ' ', 2)
  order by "Возраст" asc
  offset $2 limit 1;
  if "Результат" is null then
    raise exception 'Человек не найден: %; offset = %', $1, $2;
  end if;
  return "Результат";
end;
$$ language plpgsql;

insert into "Профессия" ("Наименование", "Зарплата") values
('Оружейник', 300),
('Ювелир', 2000),
('Пекарь', 200),
('Аптекарь', 500),
('Актёр', 200),
('Извозчик', 300),
('Винокур', 2500),
('Иконописец', 250);

insert into "Человек" ("Фамилия", "Имя", "Пол", "Возраст", "Название города", "Отец", "Мать", "Профессия") values
/* внешние люди, старшие связи которых отсутствуют (~1800-1820) */
('Волконский', 'Григорий', 'М', interval '85 years', 'Москва', null, null, "ПрофессияНомер"('Оружейник')),
('Громова', 'Елизавета', 'Ж', interval '80 years', 'Санкт-Петербург', null, null, "ПрофессияНомер"('Аптекарь')),
('Зайцева', 'Анна', 'Ж', interval '83 years', 'Новгород', null, null, "ПрофессияНомер"('Пекарь')),
('Бельская', 'Софья', 'Ж', interval '75 years', 'Киев', null, null, "ПрофессияНомер"('Ювелир')),
('Орлова', 'Мария', 'Ж', interval '70 years', 'Казань', null, null, "ПрофессияНомер"('Актёр')),
('Соколова', 'Нина', 'Ж', interval '65 years', 'Ярославль', null, null, "ПрофессияНомер"('Иконописец')),
('Любимов', 'Пётр', 'М', interval '87 years', 'Владимир', null, null, "ПрофессияНомер"('Винокур')),
('Круглова', 'Анастасия', 'Ж', interval '73 years', 'Суздаль', null, null, "ПрофессияНомер"('Пекарь')),
('Морозов', 'Кирилл', 'М', interval '77 years', 'Москва', null, null, "ПрофессияНомер"('Извозчик')),
('Леоньтев', 'Вадим', 'М', interval '90 years', 'Ростов', null, null, "ПрофессияНомер"('Ювелир')),
('Баранов', 'Семён', 'М', interval '85 years', 'Тверь', null, null, "ПрофессияНомер"('Оружейник')),

/* первое поколение (~1825-1845) */
('Волконский', 'Фёдор', 'М', interval '60 years', 'Москва', ЧеловекНомер('Волконский Григорий'), ЧеловекНомер('Зайцева Анна'), "ПрофессияНомер"('Оружейник')),
('Волконская', 'Александра', 'Ж', interval '57 years', 'Москва', ЧеловекНомер('Волконский Григорий'), ЧеловекНомер('Зайцева Анна'), "ПрофессияНомер"('Аптекарь')),

/* второе поколение (~1850-1865) */
('Волконский', 'Кирилл', 'М', interval '45 years', 'Москва', ЧеловекНомер('Волконский Фёдор'), ЧеловекНомер('Громова Елизавета'), "ПрофессияНомер"('Винокур')),
('Волконская', 'Анна', 'Ж', interval '42 years', 'Москва', ЧеловекНомер('Волконский Фёдор'), ЧеловекНомер('Громова Елизавета'), "ПрофессияНомер"('Ювелир')),
('Волконский', 'Николай', 'М', interval '40 years', 'Санкт-Петербург', ЧеловекНомер('Волконский Фёдор'), ЧеловекНомер('Громова Елизавета'), "ПрофессияНомер"('Извозчик')),
('Волконский', 'Глеб', 'М', interval '38 years', 'Москва', ЧеловекНомер('Волконский Фёдор'), ЧеловекНомер('Громова Елизавета'), "ПрофессияНомер"('Актёр')),
('Волконская', 'Любовь', 'Ж', interval '35 years', 'Москва', ЧеловекНомер('Волконский Фёдор'), ЧеловекНомер('Громова Елизавета'), "ПрофессияНомер"('Оружейник')),

/* третье поколение ( ~1880-1890) */
('Волконский', 'Михаил', 'М', interval '25 years', 'Москва', ЧеловекНомер('Волконский Кирилл'), ЧеловекНомер('Бельская Софья'), "ПрофессияНомер"('Оружейник')),
('Волконская', 'Ольга', 'Ж', interval '22 years', 'Москва', ЧеловекНомер('Волконский Кирилл'), ЧеловекНомер('Бельская Софья'), "ПрофессияНомер"('Аптекарь')),
('Волконская', 'Дарья', 'Ж', interval '20 years', 'Москва', ЧеловекНомер('Волконский Кирилл'), ЧеловекНомер('Бельская Софья'), null),
('Морозов', 'Сергей', 'М', interval '18 years', 'Москва', ЧеловекНомер('Морозов Кирилл'), ЧеловекНомер('Волконская Анна'), null),

/* четвёртое поколение (~1900-1910) */
('Волконский', 'Александр', 'М', interval '10 years', 'Москва', ЧеловекНомер('Волконский Михаил'), ЧеловекНомер('Орлова Мария'), null),
('Волконская', 'Елизавета', 'Ж', interval '9 years', 'Москва', ЧеловекНомер('Волконский Михаил'), ЧеловекНомер('Орлова Мария'), null),
('Морозова', 'Анастасия', 'М', interval '3 years', 'Москва', ЧеловекНомер('Морозов Сергей'), null, null);



--------------------------------------------------------------------------------
--  Рекурсивные запросы  -------------------------------------------------------
--------------------------------------------------------------------------------

-- 3.1. Найти всех людей, у которых дедушки имеют определённое имя ('Кирилл').
with recursive "Родственники" as (
    select "Номер", "Фамилия", "Имя", "Отец", "Мать", 0 as "Глубина"
    from "Человек"
    where "Имя" = 'Кирилл'
    union all
    select "Человек"."Номер", "Человек"."Фамилия", "Человек"."Имя", "Человек"."Отец", "Человек"."Мать", "Глубина" + 1
    from "Человек"
    join "Родственники" on "Человек"."Отец" = "Родственники"."Номер" or "Человек"."Мать" = "Родственники"."Номер"
    where "Глубина" < 3
)
select *
from "Родственники"
where "Глубина" = 2;

-- 4.2. Найти самую длинную династию, которая занимается определённой деятельностью, если кто-то из детей имеет такую же профессию что и родитель, то он является продолжателем династии. Вывести в виде цепочки.
with recursive "Династии" as (
  select "Номер", "Фамилия", "Имя", "Отец", "Мать", "Профессия",
    1 as "Длина",
    "Имя" as "Цепочка"
  from "Человек"
  where "Профессия" is not null
  union all
  select "Человек"."Номер", "Человек"."Фамилия", "Человек"."Имя", "Человек"."Отец", "Человек"."Мать", "Человек"."Профессия",
    "Длина" + 1,
    "Цепочка" || ' -> ' || "Человек"."Имя" as "Цепочка"
  from "Человек"
  join "Династии"
    on "Человек"."Отец" = "Династии"."Номер" and "Человек"."Профессия" in (
        select "Профессия"
        from "Человек" as temp
        where temp."Номер" = "Человек"."Отец"
      )
    or "Человек"."Мать" = "Династии"."Номер" and "Человек"."Профессия" in (
        select "Профессия"
        from "Человек" as temp
        where temp."Номер" = "Человек"."Мать"
      )
)
select "Фамилия", "Длина", "Цепочка"
from "Династии"
where "Длина" = (select max("Длина") from "Династии");
