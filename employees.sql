drop table if exists "Город", "Сотрудник";
drop type if exists "Пол человека";

create type "Пол человека" as enum('М', 'Ж');

create table "Город" (
  "Номер" integer primary key generated always as identity,
  "Название" text unique,
  "Площадь" integer,
  "Население" integer
);

create or replace function "ГородНомер"(text)
returns integer as
$$
declare "Результат" integer;
begin
  select "Номер" into "Результат"
  from "Город"
  where "Название" = $1;
  if "Результат" is null then
    raise exception 'Город не найден: %', $1;
  end if;
  return "Результат";
end;
$$ language plpgsql;

create table "Сотрудник" (
  "Номер" integer primary key generated always as identity,
  "Фамилия" text,
  "Имя" text,
  "Пол" "Пол человека",
  "Возраст" interval check ("Возраст" >= interval '1 second'),
  "Город" integer references "Город" ("Номер"),
  "Начальник" integer references "Сотрудник" ("Номер"),
  "Стаж" interval check ("Стаж" >= interval '1 second'),
  unique ("Фамилия", "Имя", "Начальник")
);

create or replace function "СотрудникНомер"(text, text default null)
returns integer as
$$
declare "Результат" integer;
begin
  with "Выбранные" as (
    select "Номер", "Начальник"
    from "Сотрудник"
    where "Фамилия" = split_part($1, ' ', 1)
      and "Имя" = split_part($1, ' ', 2)
  )
  select "Номер" into "Результат"
  from "Выбранные"
  where "Начальник" = (
    select "Номер"
    from "Сотрудник"
    where "Фамилия" = split_part($2, ' ', 1)
      and "Имя" = split_part($2, ' ', 2)
  ) or "Начальник" is null and $2 is null;

  if "Результат" is null then
    raise exception 'Сотрудник не найден: %, нач. %', $1, $2;
  end if;
  return "Результат";
end;
$$ language plpgsql;

insert into "Город" ("Название", "Площадь", "Население") values
('Санкт-Петербург', 104, 1267000),
('Москва', 88, 1038000),
('Одесса', 50, 404000),
('Киев', 60, 247000),
('Казань', 30, 130000);

insert into "Сотрудник" ("Фамилия", "Имя", "Пол", "Возраст", "Город", "Начальник", "Стаж") values
-- Генеральный директор (без начальника)
('Иванов', 'Пётр', 'М', interval '45 years', "ГородНомер"('Москва'), null, interval '20 years'),

-- Топ-менеджмент (начальник - Иванов Пётр)
('Смирнова', 'Анна', 'Ж', interval '38 years', "ГородНомер"('Москва'), "СотрудникНомер"('Иванов Пётр'), interval '15 years'),
('Кузнецов', 'Сергей', 'М', interval '42 years', "ГородНомер"('Санкт-Петербург'), "СотрудникНомер"('Иванов Пётр'), interval '18 years'),

-- Менеджеры среднего звена
('Петрова', 'Елена', 'Ж', interval '35 years', "ГородНомер"('Киев'), "СотрудникНомер"('Смирнова Анна', 'Иванов Пётр'), interval '12 years'),
('Васильев', 'Алексей', 'М', interval '33 years', "ГородНомер"('Санкт-Петербург'), "СотрудникНомер"('Кузнецов Сергей', 'Иванов Пётр'), interval '10 years'),
('Соколова', 'Мария', 'Ж', interval '29 years', "ГородНомер"('Казань'), "СотрудникНомер"('Смирнова Анна', 'Иванов Пётр'), interval '8 years'),

-- Обычные сотрудники
('Федоров', 'Дмитрий', 'М', interval '28 years', "ГородНомер"('Москва'), "СотрудникНомер"('Петрова Елена', 'Смирнова Анна'), interval '5 years'),
('Михайлова', 'Ольга', 'Ж', interval '27 years', "ГородНомер"('Одесса'), "СотрудникНомер"('Петрова Елена', 'Смирнова Анна'), interval '6 years'),
('Новиков', 'Иван', 'М', interval '30 years', "ГородНомер"('Киев'), "СотрудникНомер"('Васильев Алексей', 'Кузнецов Сергей'), interval '7 years'),
('Лебедева', 'Татьяна', 'Ж', interval '26 years', "ГородНомер"('Санкт-Петербург'), "СотрудникНомер"('Васильев Алексей', 'Кузнецов Сергей'), interval '4 years'),
('Козлов', 'Андрей', 'М', interval '31 years', "ГородНомер"('Казань'), "СотрудникНомер"('Соколова Мария', 'Смирнова Анна'), interval '9 years'),
('Павлова', 'Екатерина', 'Ж', interval '24 years', "ГородНомер"('Москва'), "СотрудникНомер"('Соколова Мария', 'Смирнова Анна'), interval '3 years'),

-- Сотрудники с несколькими начальниками (дублируем с разными начальниками)
('Морозов', 'Артем', 'М', interval '32 years', "ГородНомер"('Одесса'), "СотрудникНомер"('Петрова Елена', 'Смирнова Анна'), interval '11 years'),
('Морозов', 'Артем', 'М', interval '32 years', "ГородНомер"('Одесса'), "СотрудникНомер"('Васильев Алексей', 'Кузнецов Сергей'), interval '11 years'),
('Волкова', 'Наталья', 'Ж', interval '29 years', "ГородНомер"('Киев'), "СотрудникНомер"('Петрова Елена', 'Смирнова Анна'), interval '6 years'),
('Волкова', 'Наталья', 'Ж', interval '29 years', "ГородНомер"('Киев'), "СотрудникНомер"('Соколова Мария', 'Смирнова Анна'), interval '6 years'),

-- Дополнительные сотрудники
('Белов', 'Максим', 'М', interval '40 years', "ГородНомер"('Москва'), "СотрудникНомер"('Кузнецов Сергей', 'Иванов Пётр'), interval '16 years'),
('Григорьева', 'Виктория', 'Ж', interval '36 years', "ГородНомер"('Санкт-Петербург'), "СотрудникНомер"('Белов Максим', 'Кузнецов Сергей'), interval '14 years'),
('Тихонов', 'Роман', 'М', interval '25 years', "ГородНомер"('Казань'), "СотрудникНомер"('Григорьева Виктория', 'Белов Максим'), interval '2 years'),
('Орлова', 'Дарья', 'Ж', interval '23 years', "ГородНомер"('Одесса'), "СотрудникНомер"('Григорьева Виктория', 'Белов Максим'), interval '1 year'),
('Антонов', 'Павел', 'М', interval '34 years', "ГородНомер"('Киев'), "СотрудникНомер"('Белов Максим', 'Кузнецов Сергей'), interval '13 years'),
('Жукова', 'Алина', 'Ж', interval '28 years', "ГородНомер"('Москва'), "СотрудникНомер"('Антонов Павел', 'Белов Максим'), interval '5 years');


--------------------------------------------------------------------------------
--  Рекурсивные запросы  -------------------------------------------------------
--------------------------------------------------------------------------------


-- 1.1. Выбрать всех людей из Одессы, которых есть ровно два начальника.
with recursive "Иерархия" as (
  select "Номер", "Фамилия", "Имя", "Город", "Начальник", 0 as "Уровень"
  from "Сотрудник"
  where "Начальник" is null
  union all
  select temp."Номер", temp."Фамилия", temp."Имя", temp."Город", temp."Начальник", "Уровень" + 1
  from "Сотрудник" as temp
  join "Иерархия" on temp."Начальник" = "Иерархия"."Номер"
)
select distinct temp."Фамилия", temp."Имя"
from "Сотрудник" temp
join "Город" on temp."Город" = "Город"."Номер"
where "Город"."Название" = 'Одесса'
and (
  select count(distinct "Начальник")
  from "Сотрудник"
  where "Фамилия" = temp."Фамилия" and "Имя" = temp."Имя"
) = 2;

-- 2.2. Для определенного сотрудника (Иванов Пётр) сформировать цепочки его подчиненных и вывести только те, в которых больше, чем 3 элемента.
with recursive "Подчинённые" as (
  select
    "Номер",
    "Фамилия",
    "Фамилия" as "Цепочка",
    1 as "Длина"
  from "Сотрудник"
  where "Номер" = СотрудникНомер('Иванов Пётр')
  union all
  select "Сотрудник"."Номер", "Сотрудник"."Фамилия",
    "Цепочка" || ' -> ' || "Сотрудник"."Фамилия" as "Цепочка",
    "Длина" + 1 as "Длина"
  from "Сотрудник"
  join "Подчинённые" on "Сотрудник"."Начальник" = "Подчинённые"."Номер"
)
select "Длина", "Цепочка"
from "Подчинённые"
where "Длина" > 3;
